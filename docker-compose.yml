version: '3.7'

services:
  mastodon-postgres:
    image: postgres:14-alpine
    container_name: mastodon-postgres
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - mastodon-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${DB_USER}']
    environment:
      POSTGRES_DB: '${DB_NAME}'
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
    networks:
      - internal

  mastodon-redis:
    image: redis:alpine
    container_name: mastodon-redis
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    networks:
      - internal

  mastodon-web:
    image: tootsuite/mastodon
    container_name: mastodon-web
    restart: always
    environment:
      RAILS_ENV: 'production'
      LOCAL_DOMAIN: '${SUB_DOMAIN}.${DOMAIN_NAME}'
      REDIS_HOST: 'mastodon-redis'
      DB_HOST: 'mastodon-postgres'
      DB_NAME: '${DB_NAME}'
      DB_USER: '${DB_USER}'
      DB_PASS: '${DB_PASSWORD}'
      SECRET_KEY_BASE: '${MASTODON_SECRET_KEY_BASE}'
      OTP_SECRET: '${MASTODON_OTP_SECRET}'
    # before running for the first time, run chmod +u provision.sh on the host file
    command: bash -c "/provision.sh; rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    networks:
      - web
      - internal
    depends_on:
      - mastodon-postgres
      - mastodon-redis
    volumes:
      - mastodon-web:/mastodon/public/system
      - /etc/localtime:/etc/localtime:ro
      - ./provision.sh:/provision.sh:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.mastodon.rule=Host(`${SUB_DOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.mastodon.tls=true
      - traefik.http.routers.mastodon.tls.certresolver=letsencrypt
      - traefik.http.routers.mastodon.entrypoints=websecure

  mastodon-sidekiq:
    image: tootsuite/mastodon
    container_name: mastodon-sidekiq
    restart: always
    environment:
      RAILS_ENV: 'production'
      LOCAL_DOMAIN: '${SUB_DOMAIN}.${DOMAIN_NAME}'
      REDIS_HOST: 'mastodon-redis'
      DB_HOST: 'mastodon-postgres'
      DB_NAME: '${DB_NAME}'
      DB_USER: '${DB_USER}'
      DB_PASS: '${DB_PASSWORD}'
      SECRET_KEY_BASE: '${MASTODON_SECRET_KEY_BASE}'
      OTP_SECRET: '${MASTODON_OTP_SECRET}'
    command: bundle exec sidekiq
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    depends_on:
      - mastodon-postgres
      - mastodon-redis
    networks:
      - web
      - internal
    volumes:
      - mastodon-sidekiq:/mastodon/public/system

  mastodon-streaming:
    image: tootsuite/mastodon
    container_name: mastodon-streaming
    restart: always
    environment:
      RAILS_ENV: 'production'
      LOCAL_DOMAIN: '${SUB_DOMAIN}.${DOMAIN_NAME}'
      REDIS_HOST: 'mastodon-redis'
      DB_HOST: 'mastodon-postgres'
      DB_NAME: '${DB_NAME}'
      DB_USER: '${DB_USER}'
      DB_PASS: '${DB_PASSWORD}'
      SECRET_KEY_BASE: '${MASTODON_SECRET_KEY_BASE}'
      OTP_SECRET: '${MASTODON_OTP_SECRET}'
    command: node ./streaming
    networks:
      - web
      - internal
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    depends_on:
      - mastodon-postgres
      - mastodon-redis

volumes:
  mastodon-web:
  mastodon-postgres:
  mastodon-sidekiq:

networks:
  web:
    external: true
  internal:
    external: false
